class CSP:
    def __init__(self, variables, domains, constraints):
        self.variables = variables
        self.domains = domains
        self.constraints = constraints

    def is_consistent(self, assignment, var, value):
        for constraint in self.constraints[var]:
            other_var = constraint[0]
            if other_var in assignment and not constraint[1](value, assignment[other_var]):
                return False
        return True

    def backtrack(self, assignment):
        if len(assignment) == len(self.variables):
            return assignment

        unassigned_vars = [var for var in self.variables if var not in assignment]
        var = unassigned_vars[0]

        for value in self.domains[var]:
            if self.is_consistent(assignment, var, value):
                assignment[var] = value
                result = self.backtrack(assignment)
                if result is not None:
                    return result
                del assignment[var]

        return None

def not_equal(a, b):
    return a != b


regions = ["A", "B", "C", "D"]
colors = ["Red", "Green", "Blue"]

domains = {region: colors for region in regions}

constraints = {
    "A": [("B", not_equal)],
    "B": [("A", not_equal), ("C", not_equal)],
    "C": [("B", not_equal), ("D", not_equal)],
    "D": [("C", not_equal)]
}

csp = CSP(regions, domains, constraints)
solution = csp.backtrack({})

if solution:
    print("Solution:", solution)
else:
    print("No solution found.")
