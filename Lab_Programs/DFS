
board_size = 8

def is_valid_move(row, col):
    return 0 <= row < board_size and 0 <= col < board_size

def dfs(current_position, target_position, visited, path):
    row, col = current_position

    if current_position == target_position:
        return path + [current_position]

    if current_position not in visited:
        visited.add(current_position)

        knight_moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2),
                        (1, -2), (1, 2), (2, -1), (2, 1)]

        for move in knight_moves:
            new_row, new_col = row + move[0], col + move[1]
            new_position = (new_row, new_col)

            if is_valid_move(new_row, new_col) and new_position not in visited:
                new_path = dfs(new_position, target_position, visited, path + [current_position])
                if new_path:
                    return new_path

    return None

def main():
    initial_row = int(input("Enter the initial row: "))
    initial_col = int(input("Enter the initial column: "))
    initial_position = (initial_row, initial_col)

    target_row = int(input("Enter the target row: "))
    target_col = int(input("Enter the target column: "))
    target_position = (target_row, target_col)

    visited = set()
    path = dfs(initial_position, target_position, visited, [])

    if path:
        print("Path found:")
        for step, position in enumerate(path):
            print(f"Step {step + 1}: {position}")
    else:
        print("No path found.")

if __name__ == "__main__":
    main()
