from queue import PriorityQueue

class JugState:
    def __init__(self, jug1, jug2, parent=None, action=None):
        self.jug1 = jug1
        self.jug2 = jug2
        self.parent = parent
        self.action = action

    def __lt__(self, other):
        return (self.jug1 + self.jug2) < (other.jug1 + other.jug2)

def successors(state, jug1_capacity, jug2_capacity):
    successors = []
    successors.append(JugState(jug1_capacity, state.jug2, state, "Fill Jug 1"))
    successors.append(JugState(state.jug1, jug2_capacity, state, "Fill Jug 2"))
    successors.append(JugState(0, state.jug2, state, "Empty Jug 1"))
    successors.append(JugState(state.jug1, 0, state, "Empty Jug 2"))

    pour_amount = min(state.jug1, jug2_capacity - state.jug2)
    successors.append(JugState(state.jug1 - pour_amount, state.jug2 + pour_amount, state, "Pour Jug 1 to Jug 2"))

    pour_amount = min(jug1_capacity - state.jug1, state.jug2)
    successors.append(JugState(state.jug1 + pour_amount, state.jug2 - pour_amount, state, "Pour Jug 2 to Jug 1"))

    return successors

def best_first_search(start_jug1, start_jug2, target, jug1_capacity, jug2_capacity):
    start_state = JugState(start_jug1, start_jug2)
    frontier = PriorityQueue()
    frontier.put(start_state)
    explored = set()

    while not frontier.empty():
        current_state = frontier.get()

        if current_state.jug1 == target or current_state.jug2 == target:
            path = []
            while current_state:
                path.append((current_state.action, current_state.jug1, current_state.jug2))
                current_state = current_state.parent
            path.reverse()
            return path

        explored.add((current_state.jug1, current_state.jug2))

        for successor in successors(current_state, jug1_capacity, jug2_capacity):
            if (successor.jug1, successor.jug2) not in explored:
                frontier.put(successor)

    return None

def main():
    jug1_capacity = int(input("Enter capacity of jug 1: "))
    jug2_capacity = int(input("Enter capacity of jug 2: "))
    target_amount = int(input("Enter the target amount of water: "))

    start_jug1 = 0
    start_jug2 = 0

    solution_path = best_first_search(start_jug1, start_jug2, target_amount, jug1_capacity, jug2_capacity)

    if solution_path:
        print("Solution path:")
        for step, (action, jug1, jug2) in enumerate(solution_path):
            print(f"Step {step + 1}: {action} - Jug 1: {jug1}, Jug 2: {jug2}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
